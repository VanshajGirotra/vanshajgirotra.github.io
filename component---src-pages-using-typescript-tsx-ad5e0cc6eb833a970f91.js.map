{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["UsingTypescript","data","path","title","site","buildTime","href","to","Header","route","header_url","useStaticQuery","file","className","src","alt","defaultProps","Layout","children","style","margin","maxWidth","padding"],"mappings":"8FAAA,oEAyBeA,UAZyC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,qBACX,sEACA,uEAA4C,wCAA5C,+DAAyH,2CAAzH,wEACA,uEAA4C,0CAA5C,oBAAgF,0CAAhF,gBAAgH,yCAAhH,UACA,6DAAkCD,EAAlC,wBAA6DD,EAAKG,KAAKC,UAAvE,KACA,8DAAmC,uBAAGC,KAAK,6CAAR,kCAAnC,KACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,8B,uECjBEC,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAWAC,EAVHC,yBAAe,aAUpBC,KAAQF,WAChB,OACE,4BAAQG,UAAU,UAChB,wBAAIA,UAAU,gBAAd,GACMJ,EADN,IACe,yBAAKK,IAAKJ,EAAYK,IAAK,cAUhDP,EAAOQ,aAAe,CACpBP,MAAO,KAGMD,QCgBAS,IAhCA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUT,EAAY,EAAZA,MAW1B,OACE,oCACE,kBAAC,EAAD,CAAQA,MAAOA,IACf,yBACEU,MAAO,CACLC,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOJ","file":"component---src-pages-using-typescript-tsx-ad5e0cc6eb833a970f91.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\n  <Layout>\n    <SEO title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>This means that you can create and write <em>.ts/.tsx</em> files for your pages, components etc. Please note that the <em>gatsby-*.js</em> files (like gatsby-node.js) currently don't support TypeScript yet.</p>\n    <p>For type checking you'll want to install <em>typescript</em> via npm and run <em>tsc --init</em> to create a <em>.tsconfig</em> file.</p>\n    <p>You're currently on the page \"{path}\" which was built on {data.site.buildTime}.</p>\n    <p>To learn more, head over to our <a href=\"https://www.gatsbyjs.org/docs/typescript/\">documentation about TypeScript</a>.</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ route }) => {\n  const data = useStaticQuery(\n    graphql`\n    query{\n        \n        file(name: {eq:\"header_icon\"}) {\n          header_url :publicURL\n        } \n      }\n    `\n  )\n  const { file: { header_url } } = data\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__text\">\n        {`${route}`} <img src={header_url} alt={\"symbol\"} />\n      </h1>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  route: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  route: '~',\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n// import { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n// import Footer from './footer'\n\n// import \"./styles/layout.css\"\n// import './styles/main.scss'\n\nconst Layout = ({ children, route }) => {\n  // const data = useStaticQuery(graphql`\n  //   query SiteTitleQuery {\n  //     site {\n  //       siteMetadata {\n  //         header_text\n  //       }\n  //     }\n  //   }\n  // `)\n\n  return (\n    <>\n      <Header route={route} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  route: PropTypes.string\n}\n\nexport default Layout\n"],"sourceRoot":""}